local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local AnimacionesTab = _G.Window:CreateTab("Animaciones", nil)

local selectedSpeed = 1
local currentTrack = nil
local buttonsCreated = false
local buttonsCreatedR6 = false

-- Devuelve el Humanoid actual
local function getHumanoid()
	local char = LocalPlayer.Character
	if char then
		return char:FindFirstChildWhichIsA("Humanoid")
	end
	return nil
end

-- Asegura que el Animator esté disponible
local function getAnimator(Humanoid)
	for i = 1, 10 do
		local animator = Humanoid:FindFirstChildOfClass("Animator")
		if animator then return animator end
		animator = Instance.new("Animator")
		animator.Parent = Humanoid
		task.wait(0.05)
	end
	return nil
end

-- Carga animación con seguridad
local function safePlayAnim(animId)
	local humanoid = getHumanoid()
	if not humanoid then return end

	local anim = Instance.new("Animation")
	anim.AnimationId = animId

	local success, track
	for attempt = 1, 5 do
		local animator = getAnimator(humanoid)
		if not animator then
			warn("❌ No se pudo obtener Animator.")
			return
		end
		success, track = pcall(function()
			return animator:LoadAnimation(anim)
		end)
		if success and track then
			track:Play()
			track:AdjustSpeed(selectedSpeed)
			currentTrack = track
			return
		end
		task.wait(0.1)
	end
	warn("⚠️ No se pudo cargar la animación tras varios intentos.")
end

-- Botones para animaciones R15
local function setupUI_R15()
	if buttonsCreated then return end
	buttonsCreated = true

	AnimacionesTab:CreateSection("Animaciones R15")

	AnimacionesTab:CreateButton({
		Name = "❌ Quitar Animación",
		Callback = function()
			local humanoid = getHumanoid()
			if humanoid then
				for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
					track:Stop()
				end
			end
			currentTrack = nil
		end
	})

	AnimacionesTab:CreateSlider({
		Name = "Velocidad de animación",
		Range = {0, 10},
		Increment = 0.1,
		Suffix = "x",
		CurrentValue = selectedSpeed,
		Callback = function(value)
			selectedSpeed = value
			if currentTrack then
				currentTrack:AdjustSpeed(value)
			end
		end
	})

	task.spawn(function()
		-- Primero cargar desde la primer API
		local success1, emotes1 = pcall(function()
			local raw = game:HttpGet("https://pastebin.com/raw/h4981hMA")
			return HttpService:JSONDecode(raw)
		end)

		if success1 and emotes1 then
			for _, emote in ipairs(emotes1) do
				if emote.name and emote.animationid then
					AnimacionesTab:CreateButton({
						Name = emote.name,
						Callback = function()
							local humanoid = getHumanoid()
							if humanoid then
								for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
									track:Stop()
								end
								safePlayAnim(emote.animationid)
							end
						end
					})
				end
			end

			-- Luego cargar la segunda API
			local success2, emotes2 = pcall(function()
				local raw = game:HttpGet("https://raw.githubusercontent.com/Joystickplays/AFEM/refs/heads/main/emotes.json")
				return HttpService:JSONDecode(raw)
			end)

			if success2 and emotes2 then
				for _, emote in ipairs(emotes2) do
					if emote.name and emote.animationid then
						AnimacionesTab:CreateButton({
							Name = emote.name,
							Callback = function()
								local humanoid = getHumanoid()
								if humanoid then
									for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
										track:Stop()
									end
									safePlayAnim(emote.animationid)
								end
							end
						})
					end
				end
			else
				warn("❌ Error al cargar emotes R15 desde pastebin:", emotes1)
			end
		else
			warn("❌ Error al cargar emotes R15 desde GitHub:", emotes2)
		end
	end)
end







-- Botones para animaciones R6
local function setupUI_R6()
	if buttonsCreatedR6 then return end
	buttonsCreatedR6 = true

	AnimacionesTab:CreateSection("Animaciones R6")

	AnimacionesTab:CreateButton({
		Name = "❌ Quitar Animación R6",
		Callback = function()
			local humanoid = getHumanoid()
			if humanoid then
				for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
					track:Stop()
				end
			end
			currentTrack = nil
		end
	})

	task.spawn(function()
		local success, emotes = pcall(function()
			local raw = game:HttpGet("https://pastebin.com/raw/iUCKWXKV")
			return HttpService:JSONDecode(raw)
		end)

		if success then
			for _, emote in ipairs(emotes) do
				if emote.name and emote.animationid then
					AnimacionesTab:CreateButton({
						Name = "[R6] " .. emote.name,
						Callback = function()
							local humanoid = getHumanoid()
							if humanoid then
								for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
									track:Stop()
								end
								safePlayAnim(emote.animationid)
							end
						end
					})
				end
			end
		else
			warn("❌ Error al cargar emotes R6:", emotes)
		end
	end)
end

-- Carga los botones al presionar
AnimacionesTab:CreateButton({
	Name = "▶️ Cargar Animaciones R15",
	Callback = setupUI_R15
})

AnimacionesTab:CreateButton({
	Name = "▶️ Cargar Animaciones R6",
	Callback = setupUI_R6
})

-- Reset de animaciones al respawn
LocalPlayer.CharacterAdded:Connect(function()
	currentTrack = nil
end)








 
 
























--// Interfaz de animaciones (estilo SystemBroken con carga diferida para Rayfield)

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local plr = Players.LocalPlayer

-- URL con tu JSON (cámbiala si actualizas)
local animsURL = "https://pastebin.com/raw/14q07TEP"

-- Variables internas
local animData = nil
local buttonsCreated = false

--// Funciones base
local function StopAnimForCharacter(char)
	if not char then return end
	local hum = char:FindFirstChildOfClass("Humanoid")
	if not hum then return end
	for _, t in ipairs(hum:GetPlayingAnimationTracks()) do
		pcall(function() t:Stop() end)
	end
end

local function normAnimId(a)
	if not a then return nil end
	a = tostring(a)
	if a:match("^%d+$") then
		return "rbxassetid://"..a
	end
	return a
end

local function applySetSystemBroken(setName)
	if not animData then
		warn("⚠️ No hay datos cargados todavía.")
		return
	end

	local char = plr.Character or plr.CharacterAdded:Wait()
	local hum = char:FindFirstChildOfClass("Humanoid")
	local animate = char:FindFirstChild("Animate")
	if not hum or not animate then
		warn("No se encontró Humanoid o Animate en el personaje.")
		return
	end

	local data = animData[setName]
	if not data then
		warn("Set no encontrado:", setName)
		return
	end

	animate.Disabled = true
	StopAnimForCharacter(char)

	-- Normalizar IDs
	local idle1 = normAnimId(data.idle1)
	local idle2 = normAnimId(data.idle2)
	local walk = normAnimId(data.walk)
	local run = normAnimId(data.run or data.walk)
	local jump = normAnimId(data.jump)
	local climb = normAnimId(data.climb)
	local fall = normAnimId(data.fall)

	-- Asignar animaciones
	if animate:FindFirstChild("idle") then
		local idle = animate.idle
		if idle:FindFirstChild("Animation1") and idle1 then
			idle.Animation1.AnimationId = idle1
		end
		if idle:FindFirstChild("Animation2") and idle2 then
			idle.Animation2.AnimationId = idle2
		end
	end

	if animate:FindFirstChild("walk") and walk then
		local w = animate.walk:FindFirstChild("WalkAnim") or animate.walk:FindFirstChildWhichIsA("Animation")
		if w then w.AnimationId = walk end
	end

	if animate:FindFirstChild("run") and run then
		local r = animate.run:FindFirstChild("RunAnim")
		if not r then
			r = Instance.new("Animation")
			r.Name = "RunAnim"
			r.Parent = animate.run
		end
		r.AnimationId = run
	end

	if animate:FindFirstChild("jump") and jump then
		local j = animate.jump:FindFirstChild("JumpAnim") or animate.jump:FindFirstChildWhichIsA("Animation")
		if j then j.AnimationId = jump end
	end

	if animate:FindFirstChild("climb") and climb then
		local c = animate.climb:FindFirstChild("ClimbAnim") or animate.climb:FindFirstChildWhichIsA("Animation")
		if c then c.AnimationId = climb end
	end

	if animate:FindFirstChild("fall") and fall then
		local f = animate.fall:FindFirstChild("FallAnim") or animate.fall:FindFirstChildWhichIsA("Animation")
		if f then f.AnimationId = fall end
	end

	-- Recarga limpia
	pcall(function()
		hum:ChangeState(Enum.HumanoidStateType.RunningNoPhysics)
		task.wait(0.05)
		hum:ChangeState(Enum.HumanoidStateType.Running)
		StopAnimForCharacter(char)
		hum:Move(Vector3.zero)
	end)

	animate.Disabled = false
	print("✅ Animaciones aplicadas correctamente ->", setName)

	if Rayfield and Rayfield.Notify then
		Rayfield:Notify({
			Title = "Animaciones Aplicadas",
			Content = "Se aplicó el set: " .. setName,
			Duration = 3,
			Image = 4483362458
		})
	end
end

--// Interfaz Rayfield

AnimacionesTab:CreateButton({
	Name = "📦 Cargar Animaciones",
	Callback = function()
		if buttonsCreated then return end
		buttonsCreated = true

		local success, data = pcall(function()
			return HttpService:JSONDecode(game:HttpGet(animsURL))
		end)

		if not success or type(data) ~= "table" then
			warn("No se pudo cargar el JSON de animaciones.")
			if Rayfield and Rayfield.Notify then
				Rayfield:Notify({
					Title = "Error",
					Content = "No se pudo cargar el JSON.",
					Duration = 4,
					Image = 4483362458
				})
			end
			return
		end

		animData = data

		for setName, _ in pairs(animData) do
			AnimacionesTab:CreateButton({
				Name = setName,
				Callback = function()
					applySetSystemBroken(setName)
				end
			})
		end

		if Rayfield and Rayfield.Notify then
			Rayfield:Notify({
				Title = "Animaciones Cargadas",
				Content = "Los botones fueron generados correctamente.",
				Duration = 3,
				Image = 4483362458
			})
		end
	end
})
