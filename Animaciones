local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local AnimacionesTab = _G.Window:CreateTab("Animaciones", nil)

local selectedSpeed = 1
local currentTrack = nil
local buttonsCreated = false
local buttonsCreatedR6 = false

-- Devuelve el Humanoid actual
local function getHumanoid()
	local char = LocalPlayer.Character
	if char then
		return char:FindFirstChildWhichIsA("Humanoid")
	end
	return nil
end

-- Asegura que el Animator esté disponible
local function getAnimator(Humanoid)
	for i = 1, 10 do
		local animator = Humanoid:FindFirstChildOfClass("Animator")
		if animator then return animator end
		animator = Instance.new("Animator")
		animator.Parent = Humanoid
		task.wait(0.05)
	end
	return nil
end

-- Carga animación con seguridad
local function safePlayAnim(animId)
	local humanoid = getHumanoid()
	if not humanoid then return end

	local anim = Instance.new("Animation")
	anim.AnimationId = animId

	local success, track
	for attempt = 1, 5 do
		local animator = getAnimator(humanoid)
		if not animator then
			warn("❌ No se pudo obtener Animator.")
			return
		end
		success, track = pcall(function()
			return animator:LoadAnimation(anim)
		end)
		if success and track then
			track:Play()
			track:AdjustSpeed(selectedSpeed)
			currentTrack = track
			return
		end
		task.wait(0.1)
	end
	warn("⚠️ No se pudo cargar la animación tras varios intentos.")
end

-- Botones para animaciones R15
local function setupUI_R15()
	if buttonsCreated then return end
	buttonsCreated = true

	AnimacionesTab:CreateSection("Animaciones R15")

	AnimacionesTab:CreateButton({
		Name = "❌ Quitar Animación",
		Callback = function()
			local humanoid = getHumanoid()
			if humanoid then
				for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
					track:Stop()
				end
			end
			currentTrack = nil
		end
	})

	AnimacionesTab:CreateSlider({
		Name = "Velocidad de animación",
		Range = {0, 10},
		Increment = 0.1,
		Suffix = "x",
		CurrentValue = selectedSpeed,
		Callback = function(value)
			selectedSpeed = value
			if currentTrack then
				currentTrack:AdjustSpeed(value)
			end
		end
	})

	task.spawn(function()
		-- Primero cargar desde la primer API
		local success1, emotes1 = pcall(function()
			local raw = game:HttpGet("https://pastebin.com/raw/h4981hMA")
			return HttpService:JSONDecode(raw)
		end)

		if success1 and emotes1 then
			for _, emote in ipairs(emotes1) do
				if emote.name and emote.animationid then
					AnimacionesTab:CreateButton({
						Name = emote.name,
						Callback = function()
							local humanoid = getHumanoid()
							if humanoid then
								for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
									track:Stop()
								end
								safePlayAnim(emote.animationid)
							end
						end
					})
				end
			end

			-- Luego cargar la segunda API
			local success2, emotes2 = pcall(function()
				local raw = game:HttpGet("https://raw.githubusercontent.com/Joystickplays/AFEM/refs/heads/main/emotes.json")
				return HttpService:JSONDecode(raw)
			end)

			if success2 and emotes2 then
				for _, emote in ipairs(emotes2) do
					if emote.name and emote.animationid then
						AnimacionesTab:CreateButton({
							Name = emote.name,
							Callback = function()
								local humanoid = getHumanoid()
								if humanoid then
									for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
										track:Stop()
									end
									safePlayAnim(emote.animationid)
								end
							end
						})
					end
				end
			else
				warn("❌ Error al cargar emotes R15 desde pastebin:", emotes1)
			end
		else
			warn("❌ Error al cargar emotes R15 desde GitHub:", emotes2)
		end
	end)
end







-- Botones para animaciones R6
local function setupUI_R6()
	if buttonsCreatedR6 then return end
	buttonsCreatedR6 = true

	AnimacionesTab:CreateSection("Animaciones R6")

	AnimacionesTab:CreateButton({
		Name = "❌ Quitar Animación R6",
		Callback = function()
			local humanoid = getHumanoid()
			if humanoid then
				for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
					track:Stop()
				end
			end
			currentTrack = nil
		end
	})

	task.spawn(function()
		local success, emotes = pcall(function()
			local raw = game:HttpGet("https://pastebin.com/raw/iUCKWXKV")
			return HttpService:JSONDecode(raw)
		end)

		if success then
			for _, emote in ipairs(emotes) do
				if emote.name and emote.animationid then
					AnimacionesTab:CreateButton({
						Name = "[R6] " .. emote.name,
						Callback = function()
							local humanoid = getHumanoid()
							if humanoid then
								for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
									track:Stop()
								end
								safePlayAnim(emote.animationid)
							end
						end
					})
				end
			end
		else
			warn("❌ Error al cargar emotes R6:", emotes)
		end
	end)
end

-- Carga los botones al presionar
AnimacionesTab:CreateButton({
	Name = "▶️ Cargar Animaciones R15",
	Callback = setupUI_R15
})

AnimacionesTab:CreateButton({
	Name = "▶️ Cargar Animaciones R6",
	Callback = setupUI_R6
})

-- Reset de animaciones al respawn
LocalPlayer.CharacterAdded:Connect(function()
	currentTrack = nil
end)








 
 
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
 
local buttonsCreatedSets = false
local OriginalAnimations = nil -- Animaciones originales
local CurrentSet = nil -- Para recordar qué set está activo
 
-- Guardar animaciones originales
local function SaveOriginalAnimations(character)
    local Animate = character:FindFirstChild("Animate")
    if not Animate then return end
    OriginalAnimations = {
        idle1 = Animate.idle.Animation1.AnimationId,
        idle2 = Animate.idle.Animation2.AnimationId,
        walk  = Animate.walk.WalkAnim.AnimationId,
        run   = Animate.run.RunAnim.AnimationId,
        jump  = Animate.jump.JumpAnim.AnimationId,
        climb = Animate.climb.ClimbAnim.AnimationId,
        fall  = Animate.fall.FallAnim.AnimationId
    }
end
 
local function StopAnim(character)
    if not character then return end
    local Animate = character:FindFirstChild("Animate")
    local Hum = character:FindFirstChild("Humanoid")
    if Animate then pcall(function() Animate.Disabled = false end) end
    if Hum then
        local animtrack = Hum:GetPlayingAnimationTracks()
        for _, track in pairs(animtrack) do
            pcall(function() track:Stop() end)
        end
    end
end
 
local function ApplyAnimationSet(set)
    if not LocalPlayer.Character then return end
    local Animate = LocalPlayer.Character:FindFirstChild("Animate")
    local Hum = LocalPlayer.Character:FindFirstChild("Humanoid")
    if not Animate or not Hum then return end
 
    -- Guardar animaciones originales la primera vez
    if not OriginalAnimations then
        SaveOriginalAnimations(LocalPlayer.Character)
    end
 
    Animate.Disabled = true
    StopAnim(LocalPlayer.Character)
 
    Animate.idle.Animation1.AnimationId = set.idle1
    Animate.idle.Animation2.AnimationId = set.idle2
    Animate.walk.WalkAnim.AnimationId = set.walk
    Animate.run.RunAnim.AnimationId = set.run
    Animate.jump.JumpAnim.AnimationId = set.jump
    Animate.climb.ClimbAnim.AnimationId = set.climb
    Animate.fall.FallAnim.AnimationId = set.fall
 
    -- ✅ SOLUCIÓN: Usar GetState() para mantener el estado actual
    local currentState = Hum:GetState()
    
    -- ✅ Solo forzar cambio de estado si NO está en el aire o cayendo
    if currentState ~= Enum.HumanoidStateType.Freefall and 
       currentState ~= Enum.HumanoidStateType.Flying and
       currentState ~= Enum.HumanoidStateType.Jumping then
        -- Usar estado idle (0) en lugar de jumping (3)
        task.defer(function()
            Hum:ChangeState(Enum.HumanoidStateType.Landed)
        end)
    end
    
    Animate.Disabled = false
 
    CurrentSet = set -- Guardar set activo
end
 
local function RestoreOriginalAnimations()
    if not LocalPlayer.Character or not OriginalAnimations then return end
    local Animate = LocalPlayer.Character:FindFirstChild("Animate")
    local Hum = LocalPlayer.Character:FindFirstChild("Humanoid")
    if not Animate or not Hum then return end
 
    Animate.Disabled = true
    StopAnim(LocalPlayer.Character)
 
    Animate.idle.Animation1.AnimationId = OriginalAnimations.idle1
    Animate.idle.Animation2.AnimationId = OriginalAnimations.idle2
    Animate.walk.WalkAnim.AnimationId = OriginalAnimations.walk
    Animate.run.RunAnim.AnimationId = OriginalAnimations.run
    Animate.jump.JumpAnim.AnimationId = OriginalAnimations.jump
    Animate.climb.ClimbAnim.AnimationId = OriginalAnimations.climb
    Animate.fall.FallAnim.AnimationId = OriginalAnimations.fall
 
    -- ✅ SOLUCIÓN: No forzar ningún estado, solo reactivar Animate
    task.defer(function()
        local currentState = Hum:GetState()
        if currentState ~= Enum.HumanoidStateType.Freefall and 
           currentState ~= Enum.HumanoidStateType.Flying and
           currentState ~= Enum.HumanoidStateType.Jumping then
            Hum:ChangeState(Enum.HumanoidStateType.Landed)
        end
    end)
    
    Animate.Disabled = false
 
    CurrentSet = nil -- Ningún set activo
end
 
-- Cada vez que el personaje reaparece
LocalPlayer.CharacterAdded:Connect(function(character)
    -- Esperar a que Animate exista
    character:WaitForChild("Animate")
    character:WaitForChild("Humanoid")
 
    if OriginalAnimations then
        -- Restaurar animaciones originales si no hay set activo
        if CurrentSet then
            ApplyAnimationSet(CurrentSet)
        else
            RestoreOriginalAnimations()
        end
    else
        SaveOriginalAnimations(character)
    end
end)
 
-- UI
local function setupUI_AnimSets()
    if buttonsCreatedSets then return end
    buttonsCreatedSets = true
 
    AnimacionesTab:CreateSection("Paquete de Animaciones")
 
    AnimacionesTab:CreateButton({
        Name = "❌ Quitar Animación",
        Callback = RestoreOriginalAnimations
    })
 
    task.spawn(function()
        local success, sets = pcall(function()
            local raw = game:HttpGet("https://pastebin.com/raw/14q07TEP")
            return HttpService:JSONDecode(raw)
        end)
 
        if success and sets then
            for setName, setData in pairs(sets) do
                AnimacionesTab:CreateButton({
                    Name = setName,
                    Callback = function()
                        ApplyAnimationSet(setData)
                    end
                })
            end
        else
            warn("❌ Error al cargar JSON de animaciones:", sets)
        end
    end)
end
 
AnimacionesTab:CreateButton({
    Name = "▶️ Cargar Paquete de Animaciones",
    Callback = setupUI_AnimSets
})
