-- Servicios
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local SoundService = game:GetService("SoundService")
local VoiceChatService = game:GetService("VoiceChatService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local root = character:WaitForChild("HumanoidRootPart")

-- Shiftlock variables
local shiftlockEnabled = false
local shiftlockKeybind = Enum.KeyCode.Q
local isActive = false
local cameraConnection = nil

-- GUI Shiftlock
local ShiftlockGui = Instance.new("ScreenGui")
ShiftlockGui.Name = "ShiftlockGUI"
ShiftlockGui.ResetOnSpawn = false
ShiftlockGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ShiftlockGui.Parent = player:WaitForChild("PlayerGui")

local Button = Instance.new("ImageButton")
Button.Name = "ShiftlockButton"
Button.Parent = ShiftlockGui
Button.BackgroundTransparency = 1
Button.Size = UDim2.new(0.0636, 0, 0.0661, 0)
Button.Position = UDim2.new(0.9219, 0, 0.5523, 0)
Button.SizeConstraint = Enum.SizeConstraint.RelativeXX
Button.Visible = false

local StateLabelFrame = Instance.new("Frame")
StateLabelFrame.Parent = Button
StateLabelFrame.Size = UDim2.new(1, 0, 1, 0)
StateLabelFrame.BackgroundTransparency = 0.5
StateLabelFrame.BackgroundColor3 = Color3.new(0, 0, 0)

local StateLabel = Instance.new("TextLabel")
StateLabel.Parent = StateLabelFrame
StateLabel.Size = UDim2.new(1, 0, 1, 0)
StateLabel.BackgroundTransparency = 1
StateLabel.Text = "OFF"
StateLabel.TextColor3 = Color3.new(1, 1, 1)
StateLabel.TextScaled = true
StateLabel.Font = Enum.Font.SourceSansBold

local Crosshair = Instance.new("TextLabel")
Crosshair.Parent = ShiftlockGui
Crosshair.Size = UDim2.new(0, 30, 0, 30)
Crosshair.Position = UDim2.new(0.5, -15, 0.5, -15)
Crosshair.BackgroundTransparency = 1
Crosshair.Text = "O"
Crosshair.TextScaled = true
Crosshair.TextColor3 = Color3.new(1, 1, 1)
Crosshair.Visible = false

-- Funciones Shiftlock
local function UpdateImage(state)
	StateLabel.Text = state
end

local function UpdateAutoRotate(state)
	if humanoid then
		humanoid.AutoRotate = state
	end
end

local function AnimateButtonPress()
	local tweenInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	local shrinkSize = Button.Size - UDim2.new(0.01, 0, 0.01, 0)
	local tweenShrink = TweenService:Create(Button, tweenInfo, { Size = shrinkSize })
	local tweenGrow = TweenService:Create(Button, tweenInfo, { Size = UDim2.new(0.0636, 0, 0.0661, 0) })
	tweenShrink:Play()
	tweenShrink.Completed:Connect(function()
		tweenGrow:Play()
	end)
end

local function ShiftLockToggle()
	if not ((camera.CameraSubject == humanoid or camera.CameraSubject == root) and camera.CameraType == Enum.CameraType.Custom) then
		return
	end

	AnimateButtonPress()

	if not isActive then
		isActive = true
		UpdateAutoRotate(false)
		UpdateImage("ON")
		Crosshair.Visible = true
		UserInputService.MouseIconEnabled = false
		UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter

		cameraConnection = RunService.RenderStepped:Connect(function()
			if character and root and camera then
				local direction = camera.CFrame.LookVector
				local flatDirection = Vector3.new(direction.X, 0, direction.Z)
				if flatDirection.Magnitude > 0 then
					root.CFrame = CFrame.new(root.Position, root.Position + flatDirection)
				end
			end
		end)
	else
		isActive = false
		UpdateAutoRotate(true)
		UpdateImage("OFF")
		Crosshair.Visible = false
		UserInputService.MouseIconEnabled = true
		UserInputService.MouseBehavior = Enum.MouseBehavior.Default

		if cameraConnection then
			cameraConnection:Disconnect()
			cameraConnection = nil
		end
	end
end

player.CharacterAdded:Connect(function(char)
	character = char
	humanoid = character:WaitForChild("Humanoid")
	root = character:WaitForChild("HumanoidRootPart")
	if isActive then
		UpdateAutoRotate(false)
	end
end)

Button.MouseButton1Click:Connect(function()
	if shiftlockEnabled then
		ShiftLockToggle()
	end
end)

UserInputService.InputBegan:Connect(function(input, gp)
	if gp then return end
	if not UserInputService.TouchEnabled and shiftlockEnabled and input.KeyCode == shiftlockKeybind then
		ShiftLockToggle()
	end
end)

UpdateImage("OFF")

-- Toggle Shiftlock
MainTab:CreateToggle({
	Name = "Shiftlock Q para activar",
	CurrentValue = false,
	Flag = "ShiftlockToggle",
	Callback = function(Value)
		shiftlockEnabled = Value
		Button.Visible = shiftlockEnabled and UserInputService.TouchEnabled
		if not shiftlockEnabled and isActive then
			isActive = false
			UpdateAutoRotate(true)
			UpdateImage("OFF")
			Crosshair.Visible = false
			UserInputService.MouseIconEnabled = true
			UserInputService.MouseBehavior = Enum.MouseBehavior.Default
			if cameraConnection then
				cameraConnection:Disconnect()
				cameraConnection = nil
			end
		end
	end
})

-- Caminar en el aire
local isWalkingInAir = false
local floorPart = nil
local heartbeatConnection = nil

local function isTouchingGround()
	local ray = Ray.new(root.Position, Vector3.new(0, -5, 0))
	local hitPart = workspace:FindPartOnRay(ray, character)
	return hitPart and hitPart.CanCollide
end

local function createFloor()
	if not floorPart then
		floorPart = Instance.new("Part")
		floorPart.Size = Vector3.new(50, 1, 50)
		floorPart.Anchored = true
		floorPart.CanCollide = true
		floorPart.Transparency = 1
		floorPart.Parent = workspace
	end
end

MainTab:CreateToggle({
	Name = "Caminar en el aire",
	CurrentValue = isWalkingInAir,
	Flag = "walkInAirToggle",
	Callback = function(Value)
		isWalkingInAir = Value

		if isWalkingInAir then
			createFloor()
			if not heartbeatConnection then
				heartbeatConnection = RunService.Heartbeat:Connect(function()
					if isWalkingInAir and floorPart and not isTouchingGround() then
						floorPart.Position = root.Position - Vector3.new(0, 3, 0)
					end
				end)
			end
		else
			if floorPart then
				floorPart:Destroy()
				floorPart = nil
			end
			if heartbeatConnection then
				heartbeatConnection:Disconnect()
				heartbeatConnection = nil
			end
		end
	end,
})

-- Mutear sonidos excepto voz
local mutedSounds = {}
local toggleActive = false

local function isVoiceSound(sound)
	if sound:IsDescendantOf(VoiceChatService) then return true end
	local name = sound.Name:lower()
	return name:find("voice") or name:find("vc")
end

local function muteAllExceptVoice()
	for _, sound in ipairs(game:GetDescendants()) do
		if sound:IsA("Sound") and not isVoiceSound(sound) then
			if sound.Playing and sound.Volume > 0 then
				mutedSounds[sound] = sound.Volume
				sound.Volume = 0
			end
		end
	end
end

local function unmuteAll()
	for sound, vol in pairs(mutedSounds) do
		if sound and sound.Parent then
			sound.Volume = vol
		end
	end
	mutedSounds = {}
end

game.DescendantAdded:Connect(function(sound)
	if toggleActive and sound:IsA("Sound") and not isVoiceSound(sound) then
		mutedSounds[sound] = sound.Volume
		sound.Volume = 0
	end
end)

MainTab:CreateToggle({
	Name = "Mutear sonidos (voz no)",
	CurrentValue = false,
	Flag = "MuteAudios",
	Callback = function(Value)
		toggleActive = Value
		if Value then
			muteAllExceptVoice()
		else
			unmuteAll()
		end
	end
})









---No funcional pero puesto



-- Variables
local unlockCameraConnection
local fullbrightConnection
local savedLightingSettings = {}
local cameraUnlocked = true
local fullbrightEnabled = false

-- Funci칩n para forzar el control de c치mara
local function enableCameraControl()
	local character = v14.Character or v14.CharacterAdded:Wait()
	local humanoid = character:WaitForChild("Humanoid")

	unlockCameraConnection = v12.RenderStepped:Connect(function()
		if not cameraUnlocked then return end

		if v13.CameraType ~= Enum.CameraType.Custom then
			v13.CameraType = Enum.CameraType.Custom
		end

		if v13.CameraSubject ~= humanoid then
			v13.CameraSubject = humanoid
		end

		v14.CameraMode = Enum.CameraMode.Classic
		v14.CameraMaxZoomDistance = 128
		v14.CameraMinZoomDistance = 0.5
	end)
end

-- Inicializar c치mara si ya est치 cargado el personaje
if v14.Character then
	enableCameraControl()
else
	v14.CharacterAdded:Wait()
	enableCameraControl()
end

-- TOGGLE: Unlock Camera
MainTab:CreateToggle({
	Name = "Unlock Camera",
	Flag = "unlockCam",
	CurrentValue = true,
	Callback = function(enabled)
		cameraUnlocked = enabled
		if not enabled and unlockCameraConnection then
			unlockCameraConnection:Disconnect()
			unlockCameraConnection = nil
		elseif enabled and not unlockCameraConnection then
			enableCameraControl()
		end
	end
})

-- TOGGLE: Fullbright
MainTab:CreateToggle({
	Name = "Fullbright",
	Flag = "Fullbright",
	CurrentValue = false,
	Callback = function(enabled)
		fullbrightEnabled = enabled
		if enabled then
			savedLightingSettings = {
				Ambient = v18.Ambient,
				OutdoorAmbient = v18.OutdoorAmbient,
				Brightness = v18.Brightness,
				ClockTime = v18.ClockTime,
				GlobalShadows = v18.GlobalShadows
			}
			if not fullbrightConnection then
				fullbrightConnection = v12.RenderStepped:Connect(function()
					v18.Ambient = Color3.new(1, 1, 1)
					v18.OutdoorAmbient = Color3.new(1, 1, 1)
					v18.Brightness = 1.5
					v18.ClockTime = 14
					v18.GlobalShadows = false
				end)
			end
		else
			if fullbrightConnection then
				fullbrightConnection:Disconnect()
				fullbrightConnection = nil
			end
			for prop, value in pairs(savedLightingSettings) do
				v18[prop] = value
			end
		end
	end
})

-- TOGGLE: No Fog


-- Variables para FOV
local fovEnabled = false
local savedFOV = workspace.CurrentCamera.FieldOfView
local fovValue = savedFOV

-- TOGGLE: Custom FOV
MainTab:CreateToggle({
	Name = "Custom FOV",
	Flag = "customFOV",
	CurrentValue = false,
	Callback = function(state)
		fovEnabled = state
		if state then
			workspace.CurrentCamera.FieldOfView = fovValue
		else
			workspace.CurrentCamera.FieldOfView = savedFOV
		end
	end
})

-- SLIDER: Camera FOV (solo aplica si el toggle est치 activado)
MainTab:CreateSlider({
	Name = "Camera FOV",
	Flag = "camFOV",
	Range = { 40, 120 },
	Increment = 1,
	Suffix = "춿",
	CurrentValue = savedFOV,
	Callback = function(value)
		fovValue = value
		if fovEnabled then
			workspace.CurrentCamera.FieldOfView = value
		end
	end
})
