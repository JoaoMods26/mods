---Fantasma

-- // Servicios
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")

-- // Variables de jugador
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local camera = workspace.CurrentCamera

-- // Variables de ghost
local isGhostMode = false
local ghostPart = nil
local platform = nil
local lastPosition = nil

-- // Funciones originales
local function createPlatform(position)
    if platform then platform:Destroy() end
    platform = Instance.new("Part")
    platform.Name = "PlayerPlatform"
    platform.Size = Vector3.new(10, 1, 10)
    platform.Position = position - Vector3.new(0, 3.5, 0)
    platform.Anchored = true
    platform.BrickColor = BrickColor.new("Really black")
    platform.Parent = workspace
end

local function createGhostPart(position)
    if workspace:FindFirstChild("GhostPart") then
        workspace.GhostPart:Destroy()
    end
    if ghostPart then ghostPart:Destroy() end

    ghostPart = Instance.new("Part")
    ghostPart.Name = "GhostPart"
    ghostPart.Size = Vector3.new(2, 2, 2)
    ghostPart.Position = position.Position + Vector3.new(0, 2, 0)
    ghostPart.Transparency = 0.5
    ghostPart.BrickColor = BrickColor.new("Really white")
    ghostPart.CanCollide = false
    ghostPart.Anchored = false
    ghostPart.Parent = workspace

    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.Parent = ghostPart

    local bodyGyro = Instance.new("BodyGyro")
    bodyGyro.MaxTorque = Vector3.new(0, math.huge, 0)
    bodyGyro.CFrame = CFrame.new(ghostPart.Position)
    bodyGyro.Parent = ghostPart

    camera.CameraSubject = ghostPart
    camera.CameraType = Enum.CameraType.Custom
end

local function updateGhostPartMovement()
    if not isGhostMode or not ghostPart then return end
    local moveDirection = Vector3.new(0, 0, 0)
    local speed = 60
    local cameraCFrame = camera.CFrame

    if UserInputService:IsKeyDown(Enum.KeyCode.W) then
        moveDirection += cameraCFrame.LookVector * speed
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.S) then
        moveDirection -= cameraCFrame.LookVector * speed
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.A) then
        moveDirection -= cameraCFrame.RightVector * speed
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.D) then
        moveDirection += cameraCFrame.RightVector * speed
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
        moveDirection += Vector3.new(0, speed, 0)
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
        moveDirection -= Vector3.new(0, speed, 0)
    end

    local bodyVelocity = ghostPart:FindFirstChildOfClass("BodyVelocity")
    if bodyVelocity then
        bodyVelocity.Velocity = moveDirection
    end
end

local function teleportAndGhost()
    if isGhostMode then
        humanoidRootPart.CFrame = ghostPart and CFrame.new(ghostPart.Position + Vector3.new(0, 3, 0)) or CFrame.new(0, 100, 0)
        character.Humanoid.WalkSpeed = 16
        character.Humanoid.JumpPower = 50

        for _, obj in pairs(character:GetDescendants()) do
            if obj:IsA("BasePart") or obj:IsA("MeshPart") or obj:IsA("Decal") then
                obj.Transparency = 0
            elseif obj:IsA("Accessory") and obj:FindFirstChild("Handle") then
                obj.Handle.Transparency = 0
            elseif obj:IsA("SpecialMesh") and obj.Parent:IsA("Part") then
                obj.Parent.Transparency = 0
            end
        end

        -- Mantener HumanoidRootPart invisible
        if humanoidRootPart then
            humanoidRootPart.Transparency = 1
        end

        camera.CameraSubject = character:FindFirstChildOfClass("Humanoid") or character
        camera.CameraType = Enum.CameraType.Custom

        if ghostPart then ghostPart:Destroy() ghostPart = nil end
        if platform then platform:Destroy() platform = nil end
        isGhostMode = false
    else
        lastPosition = humanoidRootPart.CFrame
        local teleportPosition = Vector3.new(math.random(-1000, 1000), 100, math.random(-1000, 1000))
        createPlatform(teleportPosition)
        humanoidRootPart.CFrame = CFrame.new(teleportPosition)
        createGhostPart(lastPosition)
        character.Humanoid.WalkSpeed = 0
        character.Humanoid.JumpPower = 0

        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Transparency = 1
            elseif part:IsA("Decal") then
                part.Transparency = 0
            end
        end

        isGhostMode = true
    end
end

-- // Manejo de respawn
player.CharacterAdded:Connect(function(char)
    character = char
    humanoidRootPart = char:WaitForChild("HumanoidRootPart")

    if isGhostMode then
        if ghostPart then ghostPart:Destroy() ghostPart = nil end
        if platform then platform:Destroy() platform = nil end
        camera.CameraSubject = character:WaitForChild("Humanoid")
        camera.CameraType = Enum.CameraType.Custom
        isGhostMode = false
    end
end)

-- // Toggle de invincibilidad Rayfield
MainTab:CreateToggle({
    Name = "Invincibilidad",
    CurrentValue = false,
    Flag = "InvincibilityToggle",
    Callback = function(Value)
        if Value and not isGhostMode then
            teleportAndGhost()
        elseif not Value and isGhostMode then
            teleportAndGhost()
        end
    end,
})

-- // Loop de movimiento
RunService.Heartbeat:Connect(function()
    updateGhostPartMovement()
end)




-----Shift lock abajo



-- Servicios
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local SoundService = game:GetService("SoundService")
local VoiceChatService = game:GetService("VoiceChatService")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local root = character:WaitForChild("HumanoidRootPart")

-- Shiftlock variables
local shiftlockEnabled = false
local shiftlockKeybind = Enum.KeyCode.Q
local isActive = false
local cameraConnection = nil

-- GUI Shiftlock
local ShiftlockGui = Instance.new("ScreenGui")
ShiftlockGui.Name = "ShiftlockGUI"
ShiftlockGui.ResetOnSpawn = false
ShiftlockGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ShiftlockGui.Parent = player:WaitForChild("PlayerGui")

local Button = Instance.new("ImageButton")
Button.Name = "ShiftlockButton"
Button.Parent = ShiftlockGui
Button.BackgroundTransparency = 1
Button.Size = UDim2.new(0.0636, 0, 0.0661, 0)
Button.Position = UDim2.new(0.9219, 0, 0.5523, 0)
Button.SizeConstraint = Enum.SizeConstraint.RelativeXX
Button.Visible = false

local StateLabelFrame = Instance.new("Frame")
StateLabelFrame.Parent = Button
StateLabelFrame.Size = UDim2.new(1, 0, 1, 0)
StateLabelFrame.BackgroundTransparency = 0.5
StateLabelFrame.BackgroundColor3 = Color3.new(0, 0, 0)

local StateLabel = Instance.new("TextLabel")
StateLabel.Parent = StateLabelFrame
StateLabel.Size = UDim2.new(1, 0, 1, 0)
StateLabel.BackgroundTransparency = 1
StateLabel.Text = "OFF"
StateLabel.TextColor3 = Color3.new(1, 1, 1)
StateLabel.TextScaled = true
StateLabel.Font = Enum.Font.SourceSansBold

local Crosshair = Instance.new("TextLabel")
Crosshair.Parent = ShiftlockGui
Crosshair.Size = UDim2.new(0, 30, 0, 30)
Crosshair.Position = UDim2.new(0.5, -15, 0.5, -15)
Crosshair.BackgroundTransparency = 1
Crosshair.Text = "O"
Crosshair.TextScaled = true
Crosshair.TextColor3 = Color3.new(1, 1, 1)
Crosshair.Visible = false

-- Funciones Shiftlock
local function UpdateImage(state)
	StateLabel.Text = state
end

local function UpdateAutoRotate(state)
	if humanoid then
		humanoid.AutoRotate = state
	end
end

local function AnimateButtonPress()
	local tweenInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	local shrinkSize = Button.Size - UDim2.new(0.01, 0, 0.01, 0)
	local tweenShrink = TweenService:Create(Button, tweenInfo, { Size = shrinkSize })
	local tweenGrow = TweenService:Create(Button, tweenInfo, { Size = UDim2.new(0.0636, 0, 0.0661, 0) })
	tweenShrink:Play()
	tweenShrink.Completed:Connect(function()
		tweenGrow:Play()
	end)
end

local function ShiftLockToggle()
	if not ((camera.CameraSubject == humanoid or camera.CameraSubject == root) and camera.CameraType == Enum.CameraType.Custom) then
		return
	end

	AnimateButtonPress()

	if not isActive then
		isActive = true
		UpdateAutoRotate(false)
		UpdateImage("ON")
		Crosshair.Visible = true
		UserInputService.MouseIconEnabled = false
		UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter

		cameraConnection = RunService.RenderStepped:Connect(function()
			if character and root and camera then
				local direction = camera.CFrame.LookVector
				local flatDirection = Vector3.new(direction.X, 0, direction.Z)
				if flatDirection.Magnitude > 0 then
					root.CFrame = CFrame.new(root.Position, root.Position + flatDirection)
				end
			end
		end)
	else
		isActive = false
		UpdateAutoRotate(true)
		UpdateImage("OFF")
		Crosshair.Visible = false
		UserInputService.MouseIconEnabled = true
		UserInputService.MouseBehavior = Enum.MouseBehavior.Default

		if cameraConnection then
			cameraConnection:Disconnect()
			cameraConnection = nil
		end
	end
end

player.CharacterAdded:Connect(function(char)
	character = char
	humanoid = character:WaitForChild("Humanoid")
	root = character:WaitForChild("HumanoidRootPart")
	if isActive then
		UpdateAutoRotate(false)
	end
end)

Button.MouseButton1Click:Connect(function()
	if shiftlockEnabled then
		ShiftLockToggle()
	end
end)

UserInputService.InputBegan:Connect(function(input, gp)
	if gp then return end
	if not UserInputService.TouchEnabled and shiftlockEnabled and input.KeyCode == shiftlockKeybind then
		ShiftLockToggle()
	end
end)

UpdateImage("OFF")

-- Toggle Shiftlock
MainTab:CreateToggle({
	Name = "Shiftlock Q para activar",
	CurrentValue = false,
	Flag = "ShiftlockToggle",
	Callback = function(Value)
		shiftlockEnabled = Value
		Button.Visible = shiftlockEnabled and UserInputService.TouchEnabled
		if not shiftlockEnabled and isActive then
			isActive = false
			UpdateAutoRotate(true)
			UpdateImage("OFF")
			Crosshair.Visible = false
			UserInputService.MouseIconEnabled = true
			UserInputService.MouseBehavior = Enum.MouseBehavior.Default
			if cameraConnection then
				cameraConnection:Disconnect()
				cameraConnection = nil
			end
		end
	end
})

-- Caminar en el aire
local isWalkingInAir = false
local floorPart = nil
local heartbeatConnection = nil

local function isTouchingGround()
	local ray = Ray.new(root.Position, Vector3.new(0, -5, 0))
	local hitPart = workspace:FindPartOnRay(ray, character)
	return hitPart and hitPart.CanCollide
end

local function createFloor()
	if not floorPart then
		floorPart = Instance.new("Part")
		floorPart.Size = Vector3.new(50, 1, 50)
		floorPart.Anchored = true
		floorPart.CanCollide = true
		floorPart.Transparency = 1
		floorPart.Parent = workspace
	end
end

MainTab:CreateToggle({
	Name = "Caminar en el aire",
	CurrentValue = isWalkingInAir,
	Flag = "walkInAirToggle",
	Callback = function(Value)
		isWalkingInAir = Value

		if isWalkingInAir then
			createFloor()
			if not heartbeatConnection then
				heartbeatConnection = RunService.Heartbeat:Connect(function()
					if isWalkingInAir and floorPart and not isTouchingGround() then
						floorPart.Position = root.Position - Vector3.new(0, 3, 0)
					end
				end)
			end
		else
			if floorPart then
				floorPart:Destroy()
				floorPart = nil
			end
			if heartbeatConnection then
				heartbeatConnection:Disconnect()
				heartbeatConnection = nil
			end
		end
	end,
})

-- Mutear sonidos excepto voz
local mutedSounds = {}
local toggleActive = false

local function isVoiceSound(sound)
	if sound:IsDescendantOf(VoiceChatService) then return true end
	local name = sound.Name:lower()
	return name:find("voice") or name:find("vc")
end

local function muteAllExceptVoice()
	for _, sound in ipairs(game:GetDescendants()) do
		if sound:IsA("Sound") and not isVoiceSound(sound) then
			if sound.Playing and sound.Volume > 0 then
				mutedSounds[sound] = sound.Volume
				sound.Volume = 0
			end
		end
	end
end

local function unmuteAll()
	for sound, vol in pairs(mutedSounds) do
		if sound and sound.Parent then
			sound.Volume = vol
		end
	end
	mutedSounds = {}
end

game.DescendantAdded:Connect(function(sound)
	if toggleActive and sound:IsA("Sound") and not isVoiceSound(sound) then
		mutedSounds[sound] = sound.Volume
		sound.Volume = 0
	end
end)

MainTab:CreateToggle({
	Name = "Mutear sonidos (voz no)",
	CurrentValue = false,
	Flag = "MuteAudios",
	Callback = function(Value)
		toggleActive = Value
		if Value then
			muteAllExceptVoice()
		else
			unmuteAll()
		end
	end
})




---Fullbright

local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")
local originalSettings = {}
local connection

MainTab:CreateToggle({
	Name = "Fullbright",
	Flag = "Fullbright",
	CurrentValue = false,
	Callback = function(enabled)
		if enabled then
			-- Guardar valores originales
			originalSettings.Brightness = Lighting.Brightness
			originalSettings.ClockTime = Lighting.ClockTime
			originalSettings.Ambient = Lighting.Ambient
			originalSettings.OutdoorAmbient = Lighting.OutdoorAmbient
			originalSettings.GlobalShadows = Lighting.GlobalShadows

			-- Conexión para forzar iluminación
			if not connection then
				connection = RunService.RenderStepped:Connect(function()
					Lighting.Brightness = 1.5
					Lighting.ClockTime = 12
					Lighting.Ambient = Color3.new(1, 1, 1)
					Lighting.OutdoorAmbient = Color3.new(1, 1, 1)
					Lighting.GlobalShadows = false
				end)
			end
		else
			-- Restaurar valores
			if connection then
				connection:Disconnect()
				connection = nil
			end
			for prop, value in pairs(originalSettings) do
				Lighting[prop] = value
			end
		end
	end
})





-- Servicios y variables necesarias
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local unlockCameraConnection
local cameraUnlocked = false -- INICIALMENTE FALSO
local originalCameraSettings = {}

-- Función para forzar el control de cámara
local function enableCameraControl()
	local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
	local humanoid = character:WaitForChild("Humanoid")

	-- Guardar estado original una sola vez
	if not originalCameraSettings.saved then
		originalCameraSettings.CameraType = Camera.CameraType
		originalCameraSettings.CameraSubject = Camera.CameraSubject
		originalCameraSettings.CameraMode = LocalPlayer.CameraMode
		originalCameraSettings.MaxZoom = LocalPlayer.CameraMaxZoomDistance
		originalCameraSettings.MinZoom = LocalPlayer.CameraMinZoomDistance
		originalCameraSettings.saved = true
	end

	-- Desconectar si ya había una conexión previa
	if unlockCameraConnection then
		unlockCameraConnection:Disconnect()
	end

	unlockCameraConnection = RunService.RenderStepped:Connect(function()
		if not cameraUnlocked then return end

		if Camera.CameraType ~= Enum.CameraType.Custom then
			Camera.CameraType = Enum.CameraType.Custom
		end

		if Camera.CameraSubject ~= humanoid then
			Camera.CameraSubject = humanoid
		end

		LocalPlayer.CameraMode = Enum.CameraMode.Classic
		LocalPlayer.CameraMaxZoomDistance = 128
		LocalPlayer.CameraMinZoomDistance = 0.5
	end)
end

-- TOGGLE: Unlock Camera
MainTab:CreateToggle({
	Name = "Desbloquear Camara",
	Flag = "unlockCam",
	CurrentValue = false,
	Callback = function(enabled)
		cameraUnlocked = enabled

		if enabled then
			enableCameraControl()
		else
			-- Desconectar render loop
			if unlockCameraConnection then
				unlockCameraConnection:Disconnect()
				unlockCameraConnection = nil
			end

			-- Restaurar valores originales si estaban guardados
			if originalCameraSettings.saved then
				Camera.CameraType = originalCameraSettings.CameraType
				Camera.CameraSubject = originalCameraSettings.CameraSubject
				LocalPlayer.CameraMode = originalCameraSettings.CameraMode
				LocalPlayer.CameraMaxZoomDistance = originalCameraSettings.MaxZoom
				LocalPlayer.CameraMinZoomDistance = originalCameraSettings.MinZoom
			end
		end
	end
})

-- Ejecutar enableCameraControl() solo si el toggle está activado al cargar (opcional)
if cameraUnlocked then
	enableCameraControl()
end

-- Reaplicar si reaparece el personaje, pero solo si está activado
LocalPlayer.CharacterAdded:Connect(function()
	if cameraUnlocked then
		enableCameraControl()
	end
end)











-- Asegúrate de que estas variables están definidas
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Variables de control
local boostEnabled = false
local boostStrength = 100
local baseWalkSpeed = 16
local baseJumpPower = 50
local originalStats = {}

-- Función para aplicar boost
local function applyBoost()
	local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
	local humanoid = character:FindFirstChildWhichIsA("Humanoid")
	if humanoid then
		-- Guardar valores originales una vez
		if not originalStats.saved then
			originalStats.WalkSpeed = humanoid.WalkSpeed
			originalStats.JumpPower = humanoid.JumpPower
			originalStats.saved = true
		end

		humanoid.UseJumpPower = true
		local speedMultiplier = (boostStrength * 0.1) / 100
		local jumpMultiplier = (boostStrength * 0.4) / 100
		humanoid.WalkSpeed = baseWalkSpeed * (1 + speedMultiplier)
		humanoid.JumpPower = baseJumpPower * (1 + jumpMultiplier)
	end
end

-- Restaurar valores originales
local function restoreStats()
	local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
	local humanoid = character:FindFirstChildWhichIsA("Humanoid")
	if humanoid and originalStats.saved then
		humanoid.WalkSpeed = originalStats.WalkSpeed
		humanoid.JumpPower = originalStats.JumpPower
	end
end

-- Toggle en MainTab
MainTab:CreateToggle({
	Name = "Salto y Velocidad Indetectable",
	Flag = "movementBoost",
	CurrentValue = false,
	Callback = function(value)
		boostEnabled = value
		if boostEnabled then
			applyBoost()
		else
			restoreStats()
		end
	end
})

-- Slider en MainTab
MainTab:CreateSlider({
	Name = "Aumento Velocidad Indetectable",
	Flag = "boostStrength",
	Range = {0, 100},
	Increment = 5,
	CurrentValue = boostStrength,
	Suffix = "+",
	Callback = function(value)
		boostStrength = value
		if boostEnabled then
			applyBoost()
		end
	end
})








-----







local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")

local antiFlingEnabled = false
local characterConnections = {}
local collisionLoop

local function SetNoCollision(character)
	for _, item in pairs(character:GetDescendants()) do
		if item:IsA("BasePart") and item.CanCollide then
			item.CanCollide = false
		end
	end
end

local function OnCharacterAdded(player, character)
	if not antiFlingEnabled or player == LocalPlayer then return end
	SetNoCollision(character)

	-- Nuevas partes
	local conn = character.DescendantAdded:Connect(function(desc)
		if desc:IsA("BasePart") then
			desc.CanCollide = false
		end
	end)

	characterConnections[player] = conn
end

local function EnableAntiFling()
	-- Inicial
	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer then
			if player.Character then
				OnCharacterAdded(player, player.Character)
			end
			characterConnections[player] = player.CharacterAdded:Connect(function(char)
				OnCharacterAdded(player, char)
			end)
		end
	end

	-- Nuevos jugadores
	characterConnections["_PlayerAdded"] = Players.PlayerAdded:Connect(function(player)
		if player == LocalPlayer then return end
		characterConnections[player] = player.CharacterAdded:Connect(function(char)
			OnCharacterAdded(player, char)
		end)
	end)

	-- Loop seguro cada 0.25s para mantener colisión desactivada
	local timer = 0
	collisionLoop = RunService.Stepped:Connect(function(_, dt)
		timer += dt
		if timer >= 0.25 then
			timer = 0
			for _, player in pairs(Players:GetPlayers()) do
				if player ~= LocalPlayer and player.Character then
					SetNoCollision(player.Character)
				end
			end
		end
	end)
end

local function DisableAntiFling()
	for _, conn in pairs(characterConnections) do
		if typeof(conn) == "RBXScriptConnection" then
			conn:Disconnect()
		end
	end
	characterConnections = {}

	if collisionLoop then
		collisionLoop:Disconnect()
		collisionLoop = nil
	end

	-- Restaurar colisión
	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character then
			for _, part in pairs(player.Character:GetDescendants()) do
				if part:IsA("BasePart") then
					part.CanCollide = true
				end
			end
		end
	end
end

MainTab:CreateToggle({
	Name = "Anti-Fling",
	CurrentValue = false,
	Callback = function(state)
		antiFlingEnabled = state
		if state then
			EnableAntiFling()
		else
			DisableAntiFling()
		end
	end,
})



-----Anti AFK



local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local camera = workspace.CurrentCamera

local AntiAfkEnabled = false
local AntiAfkThread

MainTab:CreateToggle({
    Name = "Anti-AFK OP",
    CurrentValue = false,
    Flag = "AntiAfkToggle",
    Callback = function(Value)
        AntiAfkEnabled = Value

        if AntiAfkEnabled then
            AntiAfkThread = task.spawn(function()
                while AntiAfkEnabled do
                    -- Simular salto
                    if humanoid and humanoid.Health > 0 then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end

                    -- Simular rotación de cámara
                    local camCF = camera.CFrame
                    local rotation = CFrame.Angles(0, math.rad(1), 0) -- gira un poco a la derecha
                    camera.CFrame = camCF * rotation

                    task.wait(60) -- cada 60 segundos
                end
            end)
        else
            if AntiAfkThread then
                task.cancel(AntiAfkThread)
                AntiAfkThread = nil
            end
        end
    end,
})



