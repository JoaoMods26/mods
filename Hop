
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer
local gameId = game.PlaceId


Hop =  _G.Window:CreateTab("Sever Hop", nil)


local function getServers()
    local servers = {}
    

    local success1, result1 = pcall(function()
        local url = "https://games.roblox.com/v1/games/" .. gameId .. "/servers/Public?sortOrder=Desc&limit=100"
        local response = game:HttpGet(url)
        return HttpService:JSONDecode(response)
    end)
    
    if success1 and result1 and result1.data then
        for _, server in pairs(result1.data) do
            if server.id and server.playing and server.maxPlayers then
                table.insert(servers, server)
            end
        end
    end
    
   
    if #servers == 0 then
        local success2, result2 = pcall(function()
            local url = "https://www.roblox.com/games/getgameinstancesjson?placeId=" .. gameId .. "&startindex=0"
            local response = game:HttpGet(url)
            return HttpService:JSONDecode(response)
        end)
        
        if success2 and result2 and result2.Collection then
            for _, server in pairs(result2.Collection) do
                if server.Guid and server.CurrentPlayers and server.MaxPlayers then
                    table.insert(servers, {
                        id = server.Guid,
                        playing = server.CurrentPlayers[1],
                        maxPlayers = server.MaxPlayers[1]
                    })
                end
            end
        end
    end
    
    return #servers > 0 and servers or nil
end

local function smartServerHop()
    local servers = getServers()
    if not servers then
        wait(1)
        pcall(function()
            TeleportService:Teleport(gameId, player)
        end)
        return
    end
    
    local availableServers = {}
    local currentJobId = game.JobId
    
    for _, server in pairs(servers) do
        if server.id ~= currentJobId and server.playing < server.maxPlayers then
            table.insert(availableServers, server)
        end
    end
    
    if #availableServers == 0 then
        wait(1)
        pcall(function()
            TeleportService:Teleport(gameId, player)
        end)
        return
    end
    
    local randomServer = availableServers[math.random(1, #availableServers)]
    
    local success = pcall(function()
        TeleportService:TeleportToPlaceInstance(gameId, randomServer.id, player)
    end)
    
    if not success then
        wait(1)
        pcall(function()
            TeleportService:Teleport(gameId, player)
        end)
    end
end

local function serverHopHighPlayer()
    local servers = getServers()
    if not servers then
        -- Usar método directo si no se pueden obtener servidores
        pcall(function()
            TeleportService:Teleport(gameId, player)
        end)
        return
    end
    
    local availableServers = {}
    local currentJobId = game.JobId
    
    for _, server in pairs(servers) do
        if server.id ~= currentJobId and server.playing < server.maxPlayers then
            table.insert(availableServers, server)
        end
    end
    
    if #availableServers == 0 then
        pcall(function()
            TeleportService:Teleport(gameId, player)
        end)
        return
    end
    
    table.sort(availableServers, function(a, b)
        return a.playing > b.playing
    end)
    
    local targetServer = availableServers[1]
    
    local success = pcall(function()
        TeleportService:TeleportToPlaceInstance(gameId, targetServer.id, player)
    end)
    
    if not success then
        pcall(function()
            TeleportService:Teleport(gameId, player)
        end)
    end
end

local function serverHopLowPlayer()
    local servers = getServers()
    if not servers then
        return
    end
    
    local availableServers = {}
    local currentJobId = game.JobId
    
    -- Filtrar servidores con 1-5 jugadores únicamente
    for _, server in pairs(servers) do
        if server.id ~= currentJobId and server.playing >= 1 and server.playing <= 5 and server.playing < server.maxPlayers then
            table.insert(availableServers, server)
        end
    end
    
    if #availableServers == 0 then
        return
    end
    
    table.sort(availableServers, function(a, b)
        return a.playing < b.playing
    end)
    
    local targetServer = availableServers[1]
    
    pcall(function()
        TeleportService:TeleportToPlaceInstance(gameId, targetServer.id, player)
    end)
end

local function rejoinServer()
    local success = pcall(function()
        TeleportService:TeleportToPlaceInstance(gameId, game.JobId, player)
    end)
    
    if not success then
        wait(1)
        pcall(function()
            TeleportService:Teleport(gameId, player)
        end)
    end
end

Hop:CreateButton({
    Name = "Volver a unirte (Rejoin)",
    Callback = function()
        rejoinServer()
    end,
})

Hop:CreateButton({
    Name = "Server Hop (Cambiar de server)",
    Callback = function()
        smartServerHop()
    end,
})

Hop:CreateButton({
    Name = "Servidor con Pocas Personas",
    Callback = function()
        serverHopLowPlayer()
    end,
})

Hop:CreateButton({
    Name = "Servidor Lleno",
    Callback = function()
        serverHopHighPlayer()
    end,
})

