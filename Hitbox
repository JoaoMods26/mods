----Hitbox Espander---- 
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local PhysicsService = game:GetService("PhysicsService")

local HitboxTab = _G.Window:CreateTab("Hitbox", nil)

getgenv().HitboxSize = 15
getgenv().HitboxTransparency = 0.9
getgenv().HitboxStatus = false
getgenv().TeamCheck = false

-- Crear grupo de colisión sin colisiones
pcall(function()
    PhysicsService:RegisterCollisionGroup("NoCollision")
    PhysicsService:CollisionGroupSetCollidable("NoCollision", "NoCollision", false)
end)

-- Función para aplicar grupo de colisión sin colisión a una parte
local function applyNoCollision(part)
    if part and part:IsA("BasePart") then
        pcall(function()
            PhysicsService:SetPartCollisionGroup(part, "NoCollision")
        end)
    end
end

-- Aplica el grupo sin colisión a todo el personaje
local function applyNoCollisionToCharacter(character)
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            applyNoCollision(part)
        end
    end
end

-- Función para actualizar hitboxes
local function updateHitboxes()
    for _, v in pairs(Players:GetPlayers()) do
        if v ~= Players.LocalPlayer and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = v.Character.HumanoidRootPart
            if not getgenv().TeamCheck or (v.Team ~= Players.LocalPlayer.Team) then
                pcall(function()
                    hrp.Size = Vector3.new(getgenv().HitboxSize, getgenv().HitboxSize, getgenv().HitboxSize)
                    hrp.Transparency = getgenv().HitboxTransparency
                    hrp.BrickColor = BrickColor.new("Really black")
                    hrp.Material = Enum.Material.Neon
                    hrp.CanCollide = false
                    applyNoCollisionToCharacter(v.Character)
                end)
            else
                -- Restaurar hitbox de aliados si TeamCheck está activado
                pcall(function()
                    hrp.Size = Vector3.new(2, 2, 1)
                    hrp.Transparency = 1
                    hrp.BrickColor = BrickColor.new("Medium stone grey")
                    hrp.Material = Enum.Material.Plastic
                    hrp.CanCollide = false
                    applyNoCollisionToCharacter(v.Character)
                end)
            end
        end
    end
end

-- Función para resetear todos los hitboxes
local function resetHitboxes()
    for _, v in pairs(Players:GetPlayers()) do
        if v ~= Players.LocalPlayer and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = v.Character.HumanoidRootPart
            pcall(function()
                hrp.Size = Vector3.new(2, 2, 1)
                hrp.Transparency = 1
                hrp.BrickColor = BrickColor.new("Medium stone grey")
                hrp.Material = Enum.Material.Plastic
                hrp.CanCollide = false
                applyNoCollisionToCharacter(v.Character)
            end)
        end
    end
end

-- Toggle principal de hitbox
-- Toggle principal de hitbox
local hitboxConnection
HitboxTab:CreateToggle({
    Name = "Hitbox Expander",
    CurrentValue = false,
    Flag = "HitboxToggle",
    Callback = function(state)
        getgenv().HitboxStatus = state

        -- Activar/desactivar el toggle del Noclip en MainTab
        local noclipToggle = Rayfield.Flags["NoclipToggle"]
        if noclipToggle then
            noclipToggle:Set(state)
        end

        if state then
            updateHitboxes()
            hitboxConnection = RunService.RenderStepped:Connect(function()
                if getgenv().HitboxStatus then
                    updateHitboxes()
                end
            end)
        else
            if hitboxConnection then
                hitboxConnection:Disconnect()
                hitboxConnection = nil
            end
            resetHitboxes()
        end
    end,
})

-- Toggle de Team Checker
HitboxTab:CreateToggle({
    Name = "Team Checker",
    CurrentValue = false,
    Flag = "TeamCheckToggle",
    Callback = function(state)
        getgenv().TeamCheck = state
        if getgenv().HitboxStatus then
            updateHitboxes()
        end
    end,
})

-- Slider para tamaño del hitbox
HitboxTab:CreateSlider({
    Name = "Tamaño del Hitbox",
    Range = {2, 500},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = getgenv().HitboxSize,
    Flag = "HitboxSizeSlider",
    Callback = function(val)
        getgenv().HitboxSize = val
    end,
})

-- Slider para transparencia
HitboxTab:CreateSlider({
    Name = "Transparencia",
    Range = {0, 1},
    Increment = 0.05,
    CurrentValue = getgenv().HitboxTransparency,
    Flag = "HitboxTransparencySlider",
    Callback = function(val)
        getgenv().HitboxTransparency = val
    end,
})
